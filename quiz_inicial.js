//1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
    //¬øQu√© es una variable y para qu√© sirve?
        //Una variable es un espacio de menoria donde se pueden almacenar datos que luego nos servir√°n interactuar con ellos.
    //¬øCu√°l es la diferencia entre declarar e inicializar una variable?
        //Declarar es la acci√≥n de crearla sin asignar datos. 
        //Inicializar es asignarle un valor de cualquiera de los tipos permitidos por JS.
    //¬øCu√°l es la diferencia entre sumar n√∫meros y concatenar strings?
        //Sumar n√∫meros es una operaci√≥n aritm√©tica, es decir, obtenemos un nuevo valor luego de la suma. Concatenar texto, se realiza con el operador suma, pero obtenemos los valores iniciales en un mismo string.
    //¬øCu√°l operador me permite sumar o concatenar?
        //El operador +
//2Ô∏è‚É£ Determina el nombre y tipo de dato para almacenar en variables la siguiente informaci√≥n:
    //Nombre - String
    //Apellido - String
    //Nombre de usuario en Platzi - String
    //Edad - Number
    //Correo electr√≥nico - String
    //Mayor de edad - Boolean
    //Dinero ahorrado - Number
    //Deudas - Number
//3Ô∏è‚É£ Traduce a c√≥digo JavaScript las variables del ejemplo anterior y deja tu c√≥digo en los comentarios.
    // let nombre = 'Gustavo'
    // let apellido = 'Gimenez'
    // let platziUsername = 'ggvstavo'
    // let edad = 35
    // let email = 'gustavofgimenez@gmail.com'
    // let mayorDeEdad = true;
    // let dineroAhorrado = 432
    // let deudas = 234
//4Ô∏è‚É£ Calcula e imprime las siguientes variables a partir de las variables del ejemplo anterior:
    // let nombreCompleto = `${nombre} ${apellido}`
    // let dineroReal = dineroAhorrado - deudas


//Funciones
//1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
    //¬øQu√© es una funci√≥n?
        //Es una porci√≥n de c√≥digo que sirve para resolver un problema o necesidad. Puede o no recibir par√°metros y devolver un valor.
    //¬øCu√°ndo me sirve usar una funci√≥n en mi c√≥digo?
        //Son muy utilizadas, siempre que deseo darle utilidad a las variables previamente detalladas seguramente deba utilizar una funci√≥n, ya que le dan l√≥gica al c√≥digo.
    //¬øCu√°l es la diferencia entre par√°metros y argumentos de una funci√≥n?
        //Cuando se llama a una funcion, se incluye una lista de argumentos entre par√©ntesis inmediatamente despu√©s del nombre de la funci√≥n. Cada argumento corresponde al par√°metro en la misma posici√≥n de la lista. A diferencia de la definici√≥n de par√°metros, los argumentos no tienen nombres. Cada argumento es una expresi√≥n, que puede contener cero o m√°s variables, constantes y literales.

//2Ô∏è‚É£ Convierte el siguiente c√≥digo en una funci√≥n, pero, cambiando cuando sea necesario las variables constantes por par√°metros y argumentos en una funci√≥n:
    //const nombre = "Juan David";
    //const lastname = "Castro Gallego";
    //const completeName = `${nombre} ${lastname}`;
    //const nickname = "juandc";

    //const frase = () => {
    //    console.log(`Mi nombre es ${completeName}, pero prefiero que me digas ${nickname}.`)
    //}


//Condicionales
//1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
        //¬øQu√© es un condicional?
        //Es una estructura de l√≥gica que se utiliza en programaci√≥n para optar entre varias opciones.
        //¬øQu√© tipos de condicionales existen en JavaScript y cu√°les son sus diferencias?
        //IF ELSE la m√°s utilizada, si algo ocurre se ejecuta, sino devuelve el ELSE. se  puede anidar.
        //SWITCH cuando existen varias opciones a elegir, eval√∫a cada case, sino encuentra alg√∫n true, va a default y devuelve ese contenido.
        //¬øPuedo combinar funciones y condicionales?
//2Ô∏è‚É£ Replica el comportamiento del siguiente c√≥digo que usa la sentencia switch utilizando if, else y else if:

    /**    
    const tipoDeSuscripcion = "Basic";

    switch (tipoDeSuscripcion) {
    case "Free":
        console.log("Solo puedes tomar los cursos gratis");
        break;
    case "Basic":
        console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
        break;
    case "Expert":
        console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
        break;
    case "ExpertPlus":
        console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
        break;
    }

    if (tipoDeSuscripcion == "Free") {
        console.log("Solo puedes tomar los cursos gratis");
    } else if (tipoDeSuscripcion == "Basic") {
        console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
    } else if (tipoDeSuscripcion == "Expert") {
        console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
    } else {
        console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
    }
    */

//3Ô∏è‚É£ Replica el comportamiento de tu condicional anterior con if, else y else if, pero ahora solo con if (sin else ni else if).

    /**

    //üí° Bonus: si ya eres una experta o experto en el lenguaje, te desaf√≠o a comentar c√≥mo replicar este comportamiento con arrays u objetos y un solo condicional. üòè

    const tipoDeSuscripcion = "Basic";
    const suscripciones = [{
            tipoDeSuscripcion: 'Free',
            mensaje: "Solo puedes tomar los cursos gratis"
        },{ 
            tipoDeSuscripcion: 'Basic',
            mensaje: "Puedes tomar casi todos los cursos de Platzi durante un mes"
        },{ 
            tipoDeSuscripcion: 'Expert',
            mensaje: "Puedes tomar casi todos los cursos de Platzi durante un a√±o"
        },{ 
            tipoDeSuscripcion: 'ExpertPlus',
            mensaje: "T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o"
    }]

    const resultado1 = suscripciones.find(suscripcion => suscripcion.tipoDeSuscripcion == tipoDeSuscripcion)
    const resultado2 = resultado1.tipoDeSuscripcion
    const mensajeAMostrar = resultado1.mensaje

    if(tipoDeSuscripcion == resultado2) {
        console.log(mensajeAMostrar);
    }
    //Para acceder a los valores, tenemos los siguientes m√©todos
    suscripciones.find(suscripcion => suscripcion.tipoDeSuscripcion == 'Basic')

    const resultado = suscripciones.find(suscrip => suscrip === tipoDeSuscripcion)
    while (tipoDeSuscripcion === resultado) {
        
    }
    console.log(resultado)
    */


//Ciclos
//1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
    //¬øQu√© es un ciclo?
        //Es una estructura l√≥gica que recibe de par√°metros: inicializaci√≥n de una variable, par√°metros para que se cumpla una condici√≥n, incremental. Mientras esa condici√≥n sea true, se ejecuta el contenido del ciclo.
    //¬øQu√© tipos de ciclos existen en JavaScript?
        //FOR
        //FOREACH
        //FOR IN
        //WHILE
        //DO WHILE
    //¬øQu√© es un ciclo infinito y por qu√© es un problema?
        //Se tilda el navegador porque no deja de iterar el bucle.
    //¬øPuedo mezclar ciclos y condicionales?
        //Si, se pueden mezlcar.
//2Ô∏è‚É£ Replica el comportamiento de los siguientes ciclos for utilizando ciclos while:
    /** 
    for (let i = 0; i < 5; i++) {
        console.log("El valor de i es: " + i);
    }

    let i = 0;
    while (i < 5) {
        console.log("El valor de i es: " + i);
        i++
    }

    for (let i = 10; i >= 2; i--) {
        console.log("El valor de i es: " + i);
    }

    let j = 10;
    while(j > 1) {
        console.log(`El valor de j es: ${j}`);
        j--;
    }
    */

//3Ô∏è‚É£ Escribe un c√≥digo en JavaScript que le pregunte a los usuarios cu√°nto es 2 + 2. Si responden bien, mostramos un mensaje de felicitaciones, pero si responden mal, volvemos a empezar.

    /** 
    const resultado = 4;
    while(true) {
    let userInput = prompt('¬øCu√°nto es 2 + 2?');
    if(userInput == resultado) {
        alert('Respuesta correcta');
        break;
    }
    if(userInput === null) {
        alert('Se presion√≥ CANCEL');
        break;
    }
    }
    üí° Pista: puedes usar la funci√≥n prompt de JavaScript.
    */

//Listas
//1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
    //¬øQu√© es un array?
        //Una colecci√≥n de datos (strings, numbers, boolean, undefined)
    //¬øQu√© es un objeto?
        // Un objeto es una colleci√≥n de variables y funciones agrupadas de manera estructural.
        //Las Variables definidas, se las llaman Propiedades y a las Funciones, se las llaman M√©todos.
    //¬øCu√°ndo es mejor usar objetos o arrays?
    //¬øPuedo mezclar arrays con objetos o incluso objetos con arrays?
        //Si, es posible
//2Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima su primer elemento.
    /**
    const firstItem = (unArray) => {
        console.log(unArray[0]);
    }
    */
//3Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el array completo).

    // const printingArray = function(unArray) {
    //     for (let index = 0; index < unArray.length; index++) {
    //         console.log(unArray[index]);
    //     }
    // }

//4Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier objeto como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el objeto completo).

    // const unArray = [1, 2, 3, 4, 5, 6, 7, 8, 9];
    // const printingArray = unArray.forEach(function(elemento) {
    //     console.log(`Valor ${elemento}.`);
    // })